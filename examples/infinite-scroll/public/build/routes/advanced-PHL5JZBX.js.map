{
  "version": 3,
  "sources": ["browser-route-module:/Users/kentcdodds/code/remix/examples/infinite-scroll/app/routes/advanced.tsx?browser", "../../../app/routes/advanced.tsx"],
  "sourcesContent": ["export { default, links } from \"/Users/kentcdodds/code/remix/examples/infinite-scroll/app/routes/advanced.tsx\";", "import * as React from \"react\";\nimport { useVirtual } from \"react-virtual\";\nimport type { LoaderFunction, LinksFunction } from \"remix\";\nimport { useBeforeUnload } from \"remix\";\nimport { json, useLoaderData, useSearchParams, useTransition } from \"remix\";\nimport stylesUrl from \"~/styles/index.css\";\nimport { countItems, getItems } from \"~/utils/backend.server\";\n\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: stylesUrl }];\n};\n\nconst LIMIT = 200;\nconst DATA_OVERSCAN = 40;\n\nconst getStartLimit = (searchParams: URLSearchParams) => ({\n  start: Number(searchParams.get(\"start\") || \"0\"),\n  limit: Number(searchParams.get(\"limit\") || LIMIT.toString())\n});\n\ntype LoaderData = {\n  items: Array<{ id: string; value: string }>;\n  totalItems: number;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const { start, limit } = getStartLimit(new URL(request.url).searchParams);\n  const data: LoaderData = {\n    items: await getItems({ start, limit }),\n    totalItems: await countItems()\n  };\n  return json(data, {\n    headers: {\n      \"Cache-Control\": \"public, max-age=120\"\n    }\n  });\n};\n\nconst isServerRender = typeof document === \"undefined\";\nconst useSSRLayoutEffect = isServerRender ? () => {} : React.useLayoutEffect;\n\nfunction useIsHydrating(queryString: string) {\n  return React.useState(\n    () => !isServerRender && Boolean(document.querySelector(queryString))\n  )[0];\n}\n\nexport default function Index() {\n  const data = useLoaderData<LoaderData>();\n  const transition = useTransition();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const { start, limit } = getStartLimit(searchParams);\n  const [initialStart] = React.useState(() => start);\n  const isMountedRef = React.useRef(false);\n\n  const parentRef = React.useRef<HTMLDivElement>(null);\n\n  const rowVirtualizer = useVirtual({\n    size: data.totalItems,\n    parentRef,\n    estimateSize: React.useCallback(() => 35, []),\n    initialRect: { width: 0, height: 800 }\n  });\n\n  useBeforeUnload(\n    React.useCallback(() => {\n      if (!parentRef.current) return;\n      sessionStorage.setItem(\n        \"infiniteScrollTop\",\n        parentRef.current.scrollTop.toString()\n      );\n    }, [])\n  );\n\n  useSSRLayoutEffect(() => {\n    if (!parentRef.current) return;\n\n    const inifiniteScrollTop = sessionStorage.getItem(\"infiniteScrollTop\");\n    if (!inifiniteScrollTop) return;\n\n    parentRef.current.scrollTop = Number(inifiniteScrollTop);\n\n    return () => {\n      sessionStorage.removeItem(\"infiniteScrollTop\");\n    };\n  }, [initialStart]);\n\n  const lowerBoundary = start + DATA_OVERSCAN;\n  const upperBoundary = start + limit - DATA_OVERSCAN;\n  const middleCount = Math.ceil(limit / 2);\n  const firstVirtualItem = rowVirtualizer.virtualItems.at(0);\n  const lastVirtualItem = rowVirtualizer.virtualItems.at(-1);\n  if (!firstVirtualItem || !lastVirtualItem) {\n    throw new Error(\"this should never happen\");\n  }\n\n  let neededStart = start;\n\n  if (firstVirtualItem.index < lowerBoundary) {\n    // user is scrolling up. Move the window up\n    neededStart =\n      Math.floor((firstVirtualItem.index - middleCount) / DATA_OVERSCAN) *\n      DATA_OVERSCAN;\n  } else if (lastVirtualItem.index > upperBoundary) {\n    // user is scrolling down. Move the window down\n    neededStart =\n      Math.ceil((lastVirtualItem.index - middleCount) / DATA_OVERSCAN) *\n      DATA_OVERSCAN;\n  }\n\n  // can't go below 0\n  if (neededStart < 0) {\n    neededStart = 0;\n  }\n\n  // can't go above our data\n  if (neededStart + limit > data.totalItems) {\n    neededStart = data.totalItems - limit;\n  }\n\n  React.useEffect(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n    if (neededStart !== start) {\n      setSearchParams({\n        start: String(neededStart),\n        limit: LIMIT.toString()\n      });\n    }\n  }, [start, neededStart, setSearchParams]);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n  }, []);\n\n  return (\n    <div>\n      <h1>Infinite Scroll</h1>\n      <div\n        ref={parentRef}\n        className=\"List\"\n        style={{\n          height: `800px`,\n          width: `100%`,\n          overflow: \"auto\"\n        }}\n      >\n        <div\n          style={{\n            height: `${rowVirtualizer.totalSize}px`,\n            width: \"100%\",\n            position: \"relative\"\n          }}\n        >\n          {rowVirtualizer.virtualItems.map(virtualRow => {\n            const index = isMountedRef.current\n              ? Math.abs(start - virtualRow.index)\n              : virtualRow.index;\n            const item = data.items[index];\n\n            return (\n              <div\n                key={virtualRow.key}\n                className={\n                  virtualRow.index % 2 ? \"ListItemOdd\" : \"ListItemEven\"\n                }\n                style={{\n                  position: \"absolute\",\n                  top: 0,\n                  left: 0,\n                  width: \"100%\",\n                  height: `${virtualRow.size}px`,\n                  transform: `translateY(${virtualRow.start}px)`\n                }}\n              >\n                {index + start}{\" \"}\n                {item\n                  ? item.value\n                  : transition.state === \"loading\"\n                  ? \"Loading more...\"\n                  : \"Nothing to see here...\"}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
